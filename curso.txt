Comandos git 

git config --global user.email "email@exemplo.com" //comandos para configurar o usuário do git
git config --global user.name "Daniel Dewes" // 

git init // rodar uma vez para criar o repositório local, se rodar mais de uma vez ele irá recriar o repositório local, mas não irá perder o histórico de alterações.
git add . // comando para adicionar todos os arquivos de uma vez só para serem commitados
git branch -M main //comando para criar a branche main
git commmit -m "mensagem" //comando para realizar commit 
git push -u origin main //comando para enviar os arquivos para a branch main

git log //ver histórico de commits do repositório

git commit -m "Adicionar nova funcionalidade.
>
>
Co-authored-by: NOME <nome@email.com>
Co-authored-by: OUTRO-NOME <outro@email.com>" // para adicionar pessoas que colaboraram nas alterações sendo commitadas

git pull origin main //comando para buscar alterações feitas no repositório

git revert idDoCommitAReverter
Ele faz um novo commit, revertendo a alteração, primeiramente local, e deve ser enviado para o GitHub.

Para desfazer um commit, utiliza-se o comando git reset --hard <id_do_commit_anterior>

Para alterar o commit, utiliza-se o comando: git commit --amend -m "Alterando mensagem anterior", com isso, altera-se a mensagem do último commit, e refaz o mesmo, então adiciona
as alterações feitas nos objetos staged também.

Para adicionar objetos para serem ignorados no commit, mesmo chamando git add .
Criamos um arquivo chamado .gitignore
Para ignorar um pasta inteira usa-se "/nomepaste" sem as aspas, ou somente o nome do arquivo a ser ignorado
O .gitignore tem que ser mandado pro github
Site para auxiliar na criação do .gitignore: https://www.toptal.com/developers/gitignore/